import { useLoaderData, useFetcher } from "react-router";
import type { Route } from "./+types/grocery-list";
import { z } from "zod";

export async function loader({ request }: Route.LoaderArgs) {
  const db = await import("~/db.server").then(m => m.default);
  const { getAllGroceryItems } = await import("~/models/grocery-item.server");
  
  // For demo purposes, use the test user instead of requiring login
  const user = await db.user.findFirst({ where: { email: "test@example.com" } });
  if (!user) throw new Error("No test user found");
  
  // Get recipes with meal plan multipliers
  const recipesWithMultipliers = await db.recipe.findMany({
    where: { 
      userId: user.id,
      mealPlanMultiplier: { not: null }
    },
    include: { 
      ingredients: true 
    },
    orderBy: { updatedAt: "desc" }
  });

  // Calculate grocery list
  const groceryItems = new Map();
  
  recipesWithMultipliers.forEach(recipe => {
    const multiplier = recipe.mealPlanMultiplier || 1;
    recipe.ingredients.forEach(ingredient => {
      const key = ingredient.name.toLowerCase();
      if (groceryItems.has(key)) {
        const existing = groceryItems.get(key);
        existing.amount = `${existing.amount} + ${ingredient.amount || ''} (${recipe.name})`.trim();
      } else {
        groceryItems.set(key, {
          name: ingredient.name,
          amount: `${ingredient.amount || ''} (${recipe.name})`.trim(),
          id: ingredient.id,
          recipeId: recipe.id
        });
      }
    });
  });

  // Get grocery items (items deleted from pantry that need restocking)
  const groceryRestockItems = await getAllGroceryItems(user.id);

  return { 
    mealPlanItems: Array.from(groceryItems.values()),
    groceryItems: groceryRestockItems,
    recipesCount: recipesWithMultipliers.length
  };
}

const toggleItemSchema = z.object({
  itemId: z.string(),
});

const clearCompletedSchema = z.object({
  _action: z.literal("clearCompleted"),
});

export async function action({ request }: Route.ActionArgs) {
  // Force create a test file to verify action is called - BEFORE everything else
  const fs = require('fs');
  fs.writeFileSync('/tmp/action_called.txt', `ACTION ENTRY: ${new Date().toISOString()}\n`, { flag: 'a' });
  
  const db = await import("~/db.server").then(m => m.default);
  const { toggleGroceryItem, clearCompletedGroceryItems } = await import("~/models/grocery-item.server");
  const { createShelfItem } = await import("~/models/pantry-item.server");
  
  const user = await db.user.findFirst({ where: { email: "test@example.com" } });
  if (!user) {
    fs.writeFileSync('/tmp/action_called.txt', `ERROR: No test user found\n`, { flag: 'a' });
    throw new Error("No test user found");
  }

  const formData = await request.formData();
  const action = formData.get("_action");
  
  fs.writeFileSync('/tmp/action_called.txt', `Action: ${action}, FormData keys: ${Array.from(formData.keys()).join(',')}\n`, { flag: 'a' });

  if (action === "toggleItem") {
    const itemId = formData.get("itemId") as string;
    console.log("üîß TOGGLE ACTION CALLED with itemId:", itemId);
    
    if (itemId) {
      // Get the grocery item before toggling
      const groceryItem = await db.groceryItem.findUnique({
        where: { id: itemId }
      });
      
      console.log("üîß Found grocery item:", groceryItem);
      
      if (groceryItem && groceryItem.source && !groceryItem.completed) {
        console.log("üîß Item needs restoration:", groceryItem.name, "from", groceryItem.source);
        // If item is being marked as completed and has a source, add it back to pantry
        try {
          let shelf;
          
          if (groceryItem.source === "recipe") {
            // For recipe items, try to find "Pantry" shelf first, then any shelf
            shelf = await db.pantryShelf.findFirst({
              where: { 
                userId: user.id,
                name: {
                  equals: "Pantry",
                  mode: 'insensitive'
                }
              }
            });
            
            // If no "Pantry" shelf exists, use the first available shelf
            if (!shelf) {
              shelf = await db.pantryShelf.findFirst({
                where: { userId: user.id }
              });
            }
          } else {
            // Find the shelf by name (case insensitive) for items from specific shelves
            shelf = await db.pantryShelf.findFirst({
              where: { 
                userId: user.id,
                name: {
                  equals: groceryItem.source,
                  mode: 'insensitive'
                }
              }
            });
          }
          
          console.log("üîß Found shelf:", shelf);
          
          if (shelf) {
            // Add the item back to the pantry shelf with quantity
            console.log(`üîß Creating shelf item: ${groceryItem.name} (${groceryItem.quantity || 'no quantity'}) on shelf ${shelf.name}`);
            await createShelfItem(user.id, shelf.id, groceryItem.name, groceryItem.quantity);
            console.log(`‚úÖ Restored ${groceryItem.name} ${groceryItem.quantity || ''} to ${shelf.name} (from ${groceryItem.source})`);
          } else {
            console.warn(`üîß Could not find any shelf to restore item "${groceryItem.name}"`);
          }
        } catch (error) {
          console.error("Failed to restore item to pantry:", error);
        }
      } else {
        console.log("üîß Item does not need restoration (no source or already completed)");
      }
      
      // Toggle the completion status
      console.log("üîß Toggling item completion status");
      await toggleGroceryItem(itemId);
      console.log("üîß Toggle completed");
    }
  } else if (action === "clearCompleted") {
    await clearCompletedGroceryItems(user.id);
  }

  return null;
}

export default function GroceryList() {
  const { mealPlanItems, groceryItems, recipesCount } = useLoaderData<typeof loader>();
  const fetcher = useFetcher();
  
  const allItems = [...mealPlanItems, ...groceryItems];
  const totalItems = allItems.length;

  return (
    <main className="container mx-auto px-4 py-8 max-w-4xl">
      <div className="bg-white rounded-lg shadow-md p-6">
        <div className="flex justify-between items-center mb-6">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Grocery List</h1>
            <p className="text-gray-600 mt-2">
              {recipesCount > 0 && `${recipesCount} meal plan ${recipesCount === 1 ? 'recipe' : 'recipes'}`}
              {recipesCount > 0 && groceryItems.length > 0 && " ‚Ä¢ "}
              {groceryItems.length > 0 && `${groceryItems.length} restock ${groceryItems.length === 1 ? 'item' : 'items'}`}
            </p>
          </div>
          <button className="bg-primary hover:bg-primary-light text-white px-4 py-2 rounded-md font-medium transition-colors">
            Print List
          </button>
          {groceryItems.length > 0 && (
            <fetcher.Form method="post" style={{ display: 'inline' }}>
              <button 
                type="submit"
                name="_action" 
                value="clearCompleted"
                className="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded-md text-sm font-medium transition-colors ml-2"
              >
                Clear Completed
              </button>
            </fetcher.Form>
          )}
        </div>

        {totalItems === 0 ? (
          <div className="text-center py-12">
            <div className="w-24 h-24 mx-auto mb-6 bg-gray-200 rounded-full flex items-center justify-center">
              <span className="text-4xl">üõí</span>
            </div>
            <h2 className="text-2xl font-semibold text-gray-900 mb-4">No items in your grocery list</h2>
            <p className="text-gray-600 mb-6">
              Add recipes to your meal plan to generate a grocery list automatically.
            </p>
            <a 
              href="/app/recipes" 
              className="bg-primary hover:bg-primary-light text-white px-6 py-3 rounded-md font-medium transition-colors"
            >
              Browse My Recipes
            </a>
          </div>
        ) : (
          <div className="space-y-4">
            <div className="bg-gray-50 rounded-lg p-4 mb-6">
              <h2 className="font-semibold text-gray-900 mb-2">Shopping List</h2>
              <p className="text-sm text-gray-600">
                Check off items as you shop. Tap items to mark as complete.
              </p>
            </div>

            <div className="space-y-4">
              {/* Meal Plan Items */}
              {mealPlanItems.length > 0 && (
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3 flex items-center">
                    üçΩÔ∏è Meal Plan Ingredients
                  </h3>
                  <div className="space-y-2">
                    {mealPlanItems.map((item, index) => (
                      <div key={`meal-${item.id}-${index}`} className="flex items-center space-x-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50">
                        <input 
                          type="checkbox" 
                          className="h-5 w-5 text-primary focus:ring-primary border-gray-300 rounded" 
                        />
                        <div className="flex-grow">
                          <span className="font-medium text-gray-900">{item.name}</span>
                          {item.amount && (
                            <span className="text-gray-600 text-sm ml-2">{item.amount}</span>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Restock Items from Pantry */}
              {groceryItems.length > 0 && (
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3 flex items-center">
                    üè† Restock Items
                    <span className="ml-2 text-sm text-gray-500 font-normal">
                      (Items removed from pantry)
                    </span>
                  </h3>
                  <div className="space-y-2">
                    {groceryItems.map((item) => (
                      <form method="post" key={item.id}>
                        <input type="hidden" name="itemId" value={item.id} />
                        <input type="hidden" name="_action" value="toggleItem" />
                        <div className={`flex items-center space-x-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50 ${item.completed ? 'opacity-50 bg-gray-50' : ''}`}>
                          <input 
                            type="checkbox" 
                            checked={item.completed}
                            onChange={(e) => {
                              e.currentTarget.form.submit();
                            }}
                            className="h-5 w-5 text-primary focus:ring-primary border-gray-300 rounded" 
                          />
                          <div className="flex-grow">
                            <span className={`font-medium ${item.completed ? 'line-through text-gray-500' : 'text-gray-900'}`}>
                              {item.name}
                            </span>
                            {item.quantity && (
                              <span className={`text-sm ml-2 ${item.completed ? 'text-gray-400' : 'text-gray-600'}`}>
                                {item.quantity}
                              </span>
                            )}
                            {item.source && (
                              <span className="text-gray-500 text-sm ml-2">
                                (from {item.source})
                              </span>
                            )}
                          </div>
                        </div>
                      </form>
                    ))}
                  </div>
                </div>
              )}
            </div>

            <div className="mt-8 p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <h3 className="font-semibold text-blue-900 mb-2">üí° Pro Tips:</h3>
              <ul className="text-sm text-blue-800 space-y-1">
                <li>‚Ä¢ Organize your list by store sections (produce, dairy, etc.)</li>
                <li>‚Ä¢ Check your pantry before shopping to avoid duplicates</li>
                <li>‚Ä¢ Consider buying in bulk for frequently used ingredients</li>
              </ul>
            </div>
          </div>
        )}
      </div>
    </main>
  );
}